/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/
 var __global = typeof global !== 'undefined' ? global : window; function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } } function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); } var module = QUnit.module;

var flows = require("streamline/lib/util/flows");

function delay(_, val) { if (!_) { return __future(delay, arguments, 0); };
 return flows.nextTick(__cb(_, function() {
 return _(null, val); }));};


function delayFail(_, err) { if (!_) { return __future(delayFail, arguments, 0); };
 return flows.nextTick(__cb(_, function() {
 return _(err); }));};


module("flows");

asyncTest("each", 1, function __1(_) { if (!_) { return __future(__1, arguments, 0); }; var result;
 result = 1;
 return flows.each(__cb(_, function() {


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __1) { result = (result * __1); _(); }), val); });});

asyncTest("map", 1, function __2(_) { if (!_) { return __future(__2, arguments, 0); }; var result;
 return flows.map(__cb(_, function(__0, __2) { result = __2;


 deepEqual(result, [2,4,6,8,]);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (2 * __2); return _(null, __1); }), val); });});

asyncTest("filter", 1, function __3(_) { if (!_) { return __future(__3, arguments, 0); }; var result;
 return flows.filter(__cb(_, function(__0, __2) { result = __2;


 deepEqual(result, [1,3,]);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (__2 % 2); return _(null, __1); }), val); });});

asyncTest("every", 1, function __4(_) { if (!_) { return __future(__4, arguments, 0); }; var result;
 return flows.every(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, true);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (__2 < 5); return _(null, __1); }), val); });});

asyncTest("every", 1, function __5(_) { if (!_) { return __future(__5, arguments, 0); }; var result;
 return flows.every(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, false);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (__2 < 3); return _(null, __1); }), val); });});

asyncTest("some", 1, function __6(_) { if (!_) { return __future(__6, arguments, 0); }; var result;
 return flows.some(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, true);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (__2 < 3); return _(null, __1); }), val); });});

asyncTest("some", 1, function __7(_) { if (!_) { return __future(__7, arguments, 0); }; var result;
 return flows.some(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, false);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (__2 < 0); return _(null, __1); }), val); });});

asyncTest("reduce", 1, function __8(_) { if (!_) { return __future(__8, arguments, 0); }; var result;
 return flows.reduce(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, v, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (v * __2); return _(null, __1); }), val); }, 1);});

asyncTest("reduceRight", 1, function __9(_) { if (!_) { return __future(__9, arguments, 0); }; var result;
 return flows.reduceRight(__cb(_, function(__0, __2) { result = __2;


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, v, val) { if (!_) { return __future(__1, arguments, 0); } ; return delay(__cb(_, function(__0, __2) { var __1 = (v * __2); return _(null, __1); }), val); }, 1);});

asyncTest("collectAll", 1, function __10(_) { if (!_) { return __future(__10, arguments, 0); }; var total, peak, count, results;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ;
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, function(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); }; }; total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),]).collectAll(__cb(_, function(__0, __1) { results = __1;
 deepEqual([total,peak,count,results,], [6,3,0,[2,4,6,],]);
 start(); _(); }));});

asyncTest("collectOne", 1, function __11(_) { if (!_) { return __future(__11, arguments, 0); }; var total, peak, count, result;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ;
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, function(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); }; }; total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),]).collectOne(__cb(_, function(__0, __1) { result = __1;
 deepEqual([total,peak,count,result,], [1,3,2,2,]);
 start(); _(); }));});

asyncTest("collectAll with limit", 1, function __12(_) { if (!_) { return __future(__12, arguments, 0); }; var total, peak, count, results;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ;
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, function(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); }; }; total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),], 2).collectAll(__cb(_, function(__0, __1) { results = __1;
 deepEqual([total,peak,count,results,], [6,2,0,[2,4,6,],]);
 start(); _(); }));});

asyncTest("contexts", 3, function __13(_) { if (!_) { return __future(__13, arguments, 0); }; var result;
 function testContext(_, x) { if (!_) { return __future(testContext, arguments, 0); } ; var y;
 flows.setContext({
 val: x });

 return delay(__cb(_, function(__0, __1) { y = __1;
 strictEqual(y, (2 * flows.getContext().val));
 return _(null, (y + 1)); }), (2 * x)); };











 return flows.spray([function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; return testContext(_, 3); },function __2(_) { if (!_) { return __future(__2, arguments, 0); } ; return testContext(_, 5); },]).collectAll(__cb(_, function(__0, __3) { result = __3;
 deepEqual(result, [7,11,]);
 start(); _(); }));});