/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
function __tryCatch(_, fn){ try { fn(); } catch (e) { try { _(e); } catch (ex) { __trap(ex); } } }
var fs = require("fs");
var depend = require("./depend");
var flows = require("streamline/lib/util/flows");
var uuid = require("streamline/lib/util/uuid");
var each = flows.each;
var path = require("path");
var url = require("streamline/lib/util/url");
function _replyError(response, statusCode, body) {
  response.writeHead(statusCode, {
    "Content-Type": "text/plain",
    "Content-Length": body.length
  });
  response.end(body);
};
exports.dispatcher = function(config) {
  config = (config || {
  });
  var root = (config.root || path.join(__dirname, "../../../../.."));
  return function __1(_, request, response) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var noneMatch, parts, qs, path, known, stats, missing, accept, boundary, endMarker, i;
    return (function(__then) {
      (function(_) {
        __tryCatch(_, function() {
          noneMatch = request.headers["if-none-match"];
          if ((noneMatch === depend.etag())) {
            response.writeHead(304, {
            });
            return _(null, response.end());
          }
        ;
          parts = request.url.split("?");
          qs = url.parseQueryString(parts[1]);
          path = qs["module"];
          known = ((qs["known"] || "")).split(",");
          if ((path[0] == ".")) {
            return _(new Error(("server require cannot resolve relative path: " + path)));
          }
        ;
          path = ((path[0] == "/") ? (root + path) : ((root + "/node_modules/") + path));
          return fs.stat((path + ".js"), __cb(_, function(__0, __2) {
            stats = __2;
            if (!stats.isFile()) {
              return _(null, _replyError(response, 404, ("file not found " + path)));
            }
          ;
            return depend.missingDependencies(__cb(_, function(__0, __3) {
              missing = __3;
              accept = request.headers.accept;
              return (function(__then) {
                if ((accept.indexOf("text/html") == 0)) {
                  response.writeHead(200, {
                    "content-type": "text/html",
                    ETag: depend.etag()
                  });
                  return response.write(__cb(_, function() {
                    response.end();
                    return _(null);
                  }), ((((((("<html>" + "\n<head><title>dependencies: ") + path) + "</title></head>") + "\n<body><ul>") + missing.sort().map(function(dep) {
                    dep = dep.substring((root.length + 1));
                    return (((("\n<li><a href=\"/require/" + dep) + "\">") + dep) + "</li>");
                  }).join("")) + "\n</ul>") + "\n</body>\n</html>"));
                }
                 else {
                  __then();
                }
              ;
              })(function() {
                boundary = uuid.generate();
                endMarker = (("\n--" + boundary) + "--\n");
                response.writeHead(200, {
                  "Content-Type": (("multipart/related; boundary=\"" + boundary) + "\""),
                  ETag: depend.etag()
                });
                i = 0;
                return each(__cb(_, function() {
                  response.end(endMarker);
                  __then();
                }), missing, function __1(_, dep) {
                  if (!_) {
                    return __future(__1, arguments, 0);
                  }
                ;
                  var modIndex, location, data;
                  return (function(__then) {
                    (function(_) {
                      __tryCatch(_, function() {
                        modIndex = dep.indexOf("/node_modules/");
                        location = ((modIndex >= 0) ? dep.substring((modIndex + 14)) : dep.substring(root.length));
                        return fs.readFile((dep + ".js"), "utf8", __cb(_, function(__0, __1) {
                          data = __1;
                          return response.write(__cb(_, __then), (((((((((((("\n--" + boundary) + "\n") + "Content-ID: FILE ") + ++i) + "\n") + "Content-Location: ") + location) + "\n") + "Content-Type: application/javascript\n") + "\n") + data) + "\n"));
                        }));
                      });
                    })(function(ex, __result) {
                      __tryCatch(_, function() {
                        if (ex) {
                          return response.write(__cb(_, function() {
                            response.end(endMarker);
                            __then();
                          }), ((((((("\n--" + boundary) + "\n") + "Content-ID: ERROR\n") + "Content-Type: text/plain\n") + "\n") + ex.toString()) + "\n"));
                        }
                         else {
                          _(null, __result);
                        }
                      ;
                      });
                    });
                  })(function() {
                    __tryCatch(_, _);
                  });
                });
              });
            }), path, known);
          }));
        });
      })(function(ex, __result) {
        __tryCatch(_, function() {
          if (ex) {
            console.error(((ex.message + "\n") + ex.stack));
            return _(null, _replyError(response, 500, ex.toString()));
          }
           else {
            _(null, __result);
          }
        ;
        });
      });
    })(function() {
      __tryCatch(_, _);
    });
  };
};