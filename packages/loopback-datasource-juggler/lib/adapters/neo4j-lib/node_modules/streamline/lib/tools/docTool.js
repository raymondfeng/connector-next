/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, fn){ var i = 0; var cb = __cb(_, fn); var safeCb = function(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
(function __main(_) {
  var fs, fsp;
  fs = require("fs");
  fsp = require("path");
  exports.generate = function __1(_, path, options) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    function _generate(_, path) {
      if (!_) {
        return __future(_generate, arguments, 0);
      }
    ;
      var stat, inside, doc, pair, isPackage, files, i;
      return fs.stat(path, __cb(_, function(__0, __1) {
        stat = __1;
        return (function(__then) {
          if (stat.isFile()) {
            return (function(__then) {
              if ((path.indexOf(".js") == (path.length - 3))) {
                return fs.readFile(path, "utf8", __cb(_, function(__0, __2) {
                  doc = __2.split("\n").map(function(line) {
                    var i = line.indexOf(("//" + "/ "));
                    line = ((i >= 0) ? line.substring((i + 4)) : null);
                    if ((line === "!doc")) {
                      inside = true;
                    }
                     else if ((line === "!nodoc")) {
                      inside = false;
                    }
                     else return ((inside && (line != null)) ? (line + "\n") : null)
                    
                  ;
                  }).filter(function(line) {
                    return (line != null);
                  }).join("");
                  return _(null, (doc || ""));
                }));
              }
               else {
                __then();
              }
            ;
            })(function() {
              return _(null, "");
            });
          }
           else {
            return (function(__then) {
              if (stat.isDirectory()) {
                pair = path.split("/node_modules/");
                isPackage = (pair[1] && (pair[1].indexOf("/") < 0));
                doc = "";
                return fs.readdir(path, __cb(_, function(__0, __3) {
                  files = __3;
                  i = 0;
                  var __9 = false;
                  return (function(__break) {
                    var __loop = __nt(_, function() {
                      if (__9) {
                        i++;
                      }
                       else {
                        __9 = true;
                      }
                    ;
                      var __8 = (i < files.length);
                      if (__8) {
                        return _generate(__cb(_, function(__0, __4) {
                          doc += __4;
                          __loop();
                        }), ((path + "/") + files[i]));
                      }
                       else {
                        __break();
                      }
                    ;
                    });
                    __loop();
                  })(function() {
                    return (function(__then) {
                      if ((isPackage && doc)) {
                        return fs.writeFile((path + "/API.md"), doc, "utf8", __cb(_, function() {
                          if (options.verbose) {
                            console.log((("generated " + path) + "/API.md"));
                          }
                        ;
                          doc = "";
                          __then();
                        }));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function() {
                      return _(null, doc);
                    });
                  });
                }));
              }
               else {
                return _(null, "");
              }
            ;
            })(__then);
          }
        ;
        })(_);
      }));
    };
    options = (options || {
    });
    return _generate(_, path);
  };
  return (function(__then) {
    if ((process.argv[1] && (process.argv[1].indexOf("/docTool") >= 0))) {
      return exports.generate(__cb(_, __then), fsp.join(process.cwd(), (process.argv[2] || ".")), {
        verbose: true
      });
    }
     else {
      __then();
    }
  ;
  })(_);
}).call(this, __trap);