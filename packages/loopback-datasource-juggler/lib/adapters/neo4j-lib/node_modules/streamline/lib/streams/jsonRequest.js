/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
var streams = require("./streams");
exports.send = function __1(_, url, obj) {
  if (!_) {
    return __future(__1, arguments, 0);
  }
;
  var json, result;
  json = ((obj && (typeof obj !== "string")) ? JSON.stringify(obj) : obj);
  return streams.httpRequest({
    url: url,
    method: (json ? "POST" : "GET"),
    headers: {
      "content-type": "application/json"
    }
  }).end(json, "utf8").response(__cb(_, function(__0, __1) {
    return __1.readAll(__cb(_, function(__0, __2) {
      result = __2;
      return _(null, JSON.parse(result));
    }));
  }));
};