/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, fn){ var i = 0; var cb = __cb(_, fn); var safeCb = function(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
function __forIn(object){ var array = []; for (var obj in object) { array.push(obj); } return array; }
(function(exports) {
  "use strict";
  exports.each = function __1(_, array, fn, thisObj) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var len, i;
    if ((!array || !array.length)) {
      return _(null);
    }
  ;
    len = array.length;
    i = 0;
    var __2 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__2) {
          i++;
        }
         else {
          __2 = true;
        }
      ;
        var __1 = (i < len);
        if (__1) {
          return fn.call(thisObj, __cb(_, __loop), array[i], i);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, array);
    });
  };
  exports.map = function __2(_, array, fn, thisObj) {
    if (!_) {
      return __future(__2, arguments, 0);
    }
  ;
    var result, len, i;
    if (!array) {
      return _(null, array);
    }
  ;
    result = [];
    len = array.length;
    i = 0;
    var __3 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__3) {
          i++;
        }
         else {
          __3 = true;
        }
      ;
        var __2 = (i < len);
        if (__2) {
          return fn.call(thisObj, __cb(_, function(__0, __1) {
            result[i] = __1;
            __loop();
          }), array[i], i);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, result);
    });
  };
  exports.filter = function __3(_, array, fn, thisObj) {
    if (!_) {
      return __future(__3, arguments, 0);
    }
  ;
    var result, len, i, elt;
    if (!array) {
      return _(null, array);
    }
  ;
    result = [];
    len = array.length;
    i = 0;
    var __3 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__3) {
          i++;
        }
         else {
          __3 = true;
        }
      ;
        var __2 = (i < len);
        if (__2) {
          elt = array[i];
          return fn.call(thisObj, __cb(_, function(__0, __1) {
            return (function(__then) {
              if (__1) {
                result.push(elt);
                __then();
              }
               else {
                __then();
              }
            ;
            })(__loop);
          }), elt);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, result);
    });
  };
  exports.every = function __4(_, array, fn, thisObj) {
    if (!_) {
      return __future(__4, arguments, 0);
    }
  ;
    var len, i;
    if (!array) {
      return _(null);
    }
  ;
    len = array.length;
    i = 0;
    var __4 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__4) {
          i++;
        }
         else {
          __4 = true;
        }
      ;
        var __3 = (i < len);
        if (__3) {
          return fn.call(thisObj, __cb(_, function(__0, __2) {
            var __1 = !__2;
            return (function(__then) {
              if (__1) {
                return _(null, false);
              }
               else {
                __then();
              }
            ;
            })(__loop);
          }), array[i]);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, true);
    });
  };
  exports.some = function __5(_, array, fn, thisObj) {
    if (!_) {
      return __future(__5, arguments, 0);
    }
  ;
    var len, i;
    if (!array) {
      return _(null);
    }
  ;
    len = array.length;
    i = 0;
    var __3 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__3) {
          i++;
        }
         else {
          __3 = true;
        }
      ;
        var __2 = (i < len);
        if (__2) {
          return fn.call(thisObj, __cb(_, function(__0, __1) {
            return (function(__then) {
              if (__1) {
                return _(null, true);
              }
               else {
                __then();
              }
            ;
            })(__loop);
          }), array[i]);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, false);
    });
  };
  exports.reduce = function __6(_, array, fn, v, thisObj) {
    if (!_) {
      return __future(__6, arguments, 0);
    }
  ;
    var len, i;
    if (!array) {
      return _(null, v);
    }
  ;
    len = array.length;
    i = 0;
    var __3 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__3) {
          i++;
        }
         else {
          __3 = true;
        }
      ;
        var __2 = (i < len);
        if (__2) {
          return fn.call(thisObj, __cb(_, function(__0, __1) {
            v = __1;
            __loop();
          }), v, array[i], i, array);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, v);
    });
  };
  exports.reduceRight = function __7(_, array, fn, v, thisObj) {
    if (!_) {
      return __future(__7, arguments, 0);
    }
  ;
    var len, i;
    if (!array) {
      return _(null, v);
    }
  ;
    len = array.length;
    i = (len - 1);
    var __3 = false;
    return (function(__break) {
      var __loop = __nt(_, function() {
        if (__3) {
          i--;
        }
         else {
          __3 = true;
        }
      ;
        var __2 = (i >= 0);
        if (__2) {
          return fn.call(thisObj, __cb(_, function(__0, __1) {
            v = __1;
            __loop();
          }), v, array[i], i, array);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, v);
    });
  };
  exports.eachKey = function __8(_, obj, fn, thisObj) {
    if (!_) {
      return __future(__8, arguments, 0);
    }
  ;
    var key;
    if (!obj) {
      return _(null, obj);
    }
  ;
    var __1 = __forIn(obj);
    var __2 = 0;
    return (function(__break) {
      var __loop = __nt(_, function() {
        var __3 = (__2 < __1.length);
        if (__3) {
          key = __1[__2++];
          return (function(__then) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              return fn.call(thisObj, __cb(_, __then), key, obj[key]);
            }
             else {
              __then();
            }
          ;
          })(__loop);
        }
         else {
          __break();
        }
      ;
      });
      __loop();
    })(function() {
      return _(null, obj);
    });
  };
  exports.spray = function(fns, max) {
    return new function() {
      var funnel = exports.funnel(max);
      this.collect = function(callback, count, trim) {
        if ((typeof (callback) != "function")) {
          throw new Error("invalid call to collect: no callback")
        };
        var results = (trim ? [] : new Array(fns.length));
        count = ((count < 0) ? fns.length : Math.min(count, fns.length));
        if ((count == 0)) {
          return callback(null, results)
        };
        var collected = 0;
        for (var i = 0; (i < fns.length); i++) {
          (function(i) {
            funnel(function(err, result) {
              if (err) {
                return callback(err)
              };
              if (trim) {
                results.push(result);
              } else {
                results[i] = result;
              };
              if ((++collected == count)) {
                return callback(null, results)
              };
            }, fns[i]);
          })(i);
        };
      };
      this.collectOne = function(callback) {
        return this.collect(function(err, result) {
          return callback(err, (result && result[0]));
        }, 1, true);
      };
      this.collectAll = function(callback) {
        return this.collect(callback, -1, false);
      };
    };
  };
  exports.funnel = function(max) {
    max = ((typeof max == "undefined") ? -1 : max);
    var queue = [];
    var active = 0;
    return function(callback, fn) {
      if ((max < 0)) {
        return fn(callback)
      };
      queue.push({
        fn: fn,
        cb: callback
      });
      function _doOne() {
        var current = queue.splice(0, 1)[0];
        if (!current.cb) {
          return current.fn()
        };
        active++;
        current.fn(function(err, result) {
          active--;
          current.cb(err, result);
          while (((active < max) && (queue.length > 0))) {
            _doOne();;
          };
        });
      };
      while (((active < max) && (queue.length > 0))) {
        _doOne();;
      };
    };
  };
  exports.collect = function __9(_, futures) {
    if (!_) {
      return __future(__9, arguments, 0);
    }
  ;
    return exports.map(_, futures, function __1(_, future) {
      if (!_) {
        return __future(__1, arguments, 0);
      }
    ;
      return future(_);
    });
  };
  exports.setContext = function(ctx) {
    var old = __global.__context;
    __global.__context = ctx;
    return old;
  };
  exports.getContext = function() {
    return __global.__context;
  };
  exports.nextTick = (((typeof process === "object") && (typeof process.nextTick === "function")) ? process.nextTick : function(callback) {
    setTimeout(function() {
      callback();
    }, 0);
  });
  exports.apply = function apply(callback, fn, thisObj, args, index) {
    if ((callback == null)) {
      return __future(apply, arguments, 0)
    };
    args.splice(((index != null) ? index : args.length), 0, callback);
    return fn.apply(thisObj, args);
  };
})(((typeof exports !== "undefined") ? exports : (window.StreamlineFlows = (window.StreamlineFlows || {
}))));