/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function DataBuffer(options) {
  var _chunks = [];
  this.read = function __1(_, len) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var chunks, total, chunk;
    if ((len < 0)) {
      len = Infinity;
    }
  ;
    if ((len == 0)) {
      return _(null, "");
    }
  ;
    chunks = [];
    total = 0;
    while ((total < len)) {
      chunk = _chunks.splice(0, 1)[0];
      if (!chunk) {
        return _(null, ((chunks.length == 0) ? null : chunks.join("")));
      }
    ;
      if (((total + chunk.length) <= len)) {
        chunks.push(chunk);
        total += chunk.length;
      }
       else {
        chunks.push(chunk.substring(0, (len - total)));
        _chunks.splice(0, 0, chunk.substring((len - total)));
        total = len;
      }
    ;
    };
    return _(null, chunks.join(""));
  };
  this.readAll = function __2(_) {
    if (!_) {
      return __future.call(this, __2, arguments, 0);
    }
  ;
    var __this = this;
    return __this.read(_, -1);
  };
  this.unread = function(chunk) {
    _chunks.splice(0, 0, chunk);
    return this;
  };
  this.write = function __3(_, data, enc) {
    if (!_) {
      return __future.call(this, __3, arguments, 0);
    }
  ;
    var __this = this;
    _chunks.push(data);
    return _(null, __this);
  };
  this.end = function(data, enc) {
    if (data) {
      _chunks.push(data);
    };
    return this;
  };
  this.contents = function() {
    return _chunks.join("");
  };
};
function HttpError(statusCode, message) {
  this.statusCode = statusCode;
  this.message = message;
  this.stack = new Error().stack;
};
function _fixHttpClientOptions(options) {
  if (!options) {
    throw new Error("request error: no options")
  };
  if ((typeof options === "string")) {
    options = {
      url: options
    };
  };
  return options;
};
function HttpClientRequest(options) {
  options = _fixHttpClientOptions(options);
  DataBuffer.call(this, options);
  var _xhr;
  this.response = function(callback) {
    if (!callback) {
      return __future.call(this, this.response, arguments, 0)
    };
    $.ajax({
      url: options.url,
      headers: options.headers,
      type: options.method,
      data: this.contents(),
      dataType: "text",
      beforeSend: function(xhr) {
        _xhr = xhr;
      },
      success: function(data, statusText, xhr) {
        callback(null, new HttpClientResponse(data, xhr));
      },
      error: function(xhr, statusText, message) {
        callback(new HttpError(xhr.status, ((statusText + ": ") + message)));
      }
    });
  };
  this.abort = function() {
    (_xhr && _xhr.abort());
    _xhr = null;
  };
};
function HttpClientResponse(data, xhr) {
  DataBuffer.call(this);
  this.end(data);
  this.statusCode = xhr.status;
  this.headers = {
  };
  var self = this;
  xhr.getAllResponseHeaders().replace(/\r\n/g, "\n").split("\n").forEach(function(header) {
    var pair = header.split(":");
    self.headers[pair[0].toLowerCase()] = (pair[1] && pair[1].trim());
  });
};
exports.httpRequest = function(options) {
  return new HttpClientRequest(options);
};