/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, fn){ var i = 0; var cb = __cb(_, fn); var safeCb = function(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
var fs = require("fs");
var fspath = require("path");
var uuid = require("streamline/lib/util//uuid");
var flows = require("streamline/lib/util/flows");
var modulesDir;
var each = flows.each;
var dependencies = {
};
var commentsRE = /(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(\/\/.*)/g;
var requireRE = /require\s*\(('|")([\w\W]*?)('|")\)/gm;
var funnel = flows.funnel(1);
function _exists(callback, path) {
  fspath.exists(path, function(result) {
    return callback(null, result);
  });
};
function _findModulesDir(_) {
  if (!_) {
    return __future(_findModulesDir, arguments, 0);
  }
;
  var dir;
  if (modulesDir) {
    return _(null, modulesDir);
  }
;
  dir = __dirname;
  var __3 = false;
  return (function(__break) {
    var __loop = __nt(_, function() {
      if (__3) {
        dir = dir.substring(0, dir.lastIndexOf("/"));
      }
       else {
        __3 = true;
      }
    ;
      var __2 = (dir.length > 0);
      if (__2) {
        return _exists(__cb(_, function(__0, __1) {
          return (function(__then) {
            if (__1) {
              modulesDir = (dir + "/node_modules");
              return _(null, modulesDir);
            }
             else {
              __then();
            }
          ;
          })(__loop);
        }), (dir + "/node_modules"));
      }
       else {
        __break();
      }
    ;
    });
    __loop();
  })(function() {
    return _(new Error("cannot resolve module: node_modules not found"));
  });
};
function _combine(path, rel) {
  var cut = path.lastIndexOf("/");
  if ((cut <= 0)) {
    throw new Error(("too many parent dirs" + rel))
  };
  path = path.substring(0, cut);
  while ((rel.indexOf("./.") == 0)) {
    rel = rel.substring(2);;
  };
  if ((rel.indexOf("../") == 0)) {
    return _combine(path, rel.substring(1))
  };
  if ((rel.indexOf("./") != 0)) {
    return ((modulesDir + "/") + rel)
  };
  return (path + rel.substring(1));
};
var _etag = uuid.generate();
var _watched = {
};
function _watcher(stats) {
  funnel(null, function() {
    _etag = uuid.generate();
    Object.keys(_watched).forEach(function(path) {
      fs.unwatchFile(path);
    });
    _watched = {
    };
    dependencies = {
    };
  });
};
exports.etag = function() {
  return ("" + _etag);
};
function _watch(file) {
  if (!_watched[file]) {
    _watched[file] = true;
    fs.watchFile(file, _watcher);
  }
;
};
function _loadFile(_, path) {
  if (!_) {
    return __future(_loadFile, arguments, 0);
  }
;
  var js, js_;
  js = (path + ".js");
  js_ = (path + "_.js");
  return _exists(__cb(_, function(__0, __1) {
    return (function(__then) {
      if (__1) {
        _watch(js_);
        return require("streamline/lib/compiler/compile").loadFile(_, path);
      }
       else {
        return _exists(__cb(_, function(__0, __3) {
          return (function(__then) {
            if (__3) {
              _watch(js);
              return fs.readFile(js, "utf8", _);
            }
             else {
              return _(new Error(("invalid require path: " + path)));
            }
          ;
          })(__then);
        }), js);
      }
    ;
    })(_);
  }), js_);
};
function _extendPath(_, path) {
  if (!_) {
    return __future(_extendPath, arguments, 0);
  }
;
  return (function(_) {
    return (function(_) {
      return _exists(__cb(_, function(__0, __3) {
        var __2 = !__3;
        var __4 = !__2;
        return (function(__then) {
          if (__4) {
            var __5 = __2;
            return _(null, __5);
          }
           else {
            __then();
          }
        ;
        })(function() {
          return _exists(_, path);
        });
      }), (path + ".js"));
    })(__cb(_, function(__0, __1) {
      var __3 = !__1;
      return (function(__then) {
        if (__3) {
          var __4 = __1;
          return _(null, __4);
        }
         else {
          __then();
        }
      ;
      })(function() {
        return fs.stat(path, __cb(_, function(__0, __6) {
          var __5 = __6.isDirectory();
          return _(null, __5);
        }));
      });
    }));
  })(__cb(_, function(__0, __2) {
    return (function(__then) {
      if (__2) {
        return _exists(__cb(_, function(__0, __3) {
          return (function(__then) {
            if (__3) {
              return _(null, (path + "/main"));
            }
             else {
              return _exists(__cb(_, function(__0, __4) {
                return (function(__then) {
                  if (__4) {
                    return _(null, (path + "/index"));
                  }
                   else {
                    __then();
                  }
                ;
                })(__then);
              }), (path + "/index.js"));
            }
          ;
          })(__then);
        }), (path + "/main.js"));
      }
       else {
        __then();
      }
    ;
    })(function() {
      return _(null, path);
    });
  }));
};
function _directDependencies(_, path) {
  if (!_) {
    return __future(_directDependencies, arguments, 0);
  }
;
  var result, str, match;
  if (dependencies[path]) {
    return _(null, dependencies[path]);
  }
;
  return _findModulesDir(__cb(_, function() {
    result = [];
    dependencies[path] = result;
    return _loadFile(__cb(_, function(__0, __1) {
      str = __1;
      str = str.replace(commentsRE, "");
      while (match = requireRE.exec(str)) {
        result.push(_combine(path, match[2]));
      };
      return _(null, result);
    }), path);
  }));
};
function _missingDependencies(_, path, known) {
  if (!_) {
    return __future(_missingDependencies, arguments, 0);
  }
;
  var knownMap, missingMap;
  function _explore(_, path, missingMap) {
    if (!_) {
      return __future(_explore, arguments, 0);
    }
  ;
    var dependencies;
    return _extendPath(__cb(_, function(__0, __2) {
      path = __2;
      if (knownMap[path]) {
        return _(null);
      }
    ;
      if (missingMap) {
        missingMap[path] = true;
      }
    ;
      knownMap[path] = true;
      return _directDependencies(__cb(_, function(__0, __3) {
        dependencies = __3;
        return each(_, dependencies, function __1(_, dependency) {
          if (!_) {
            return __future(__1, arguments, 0);
          }
        ;
          return _explore(_, dependency, missingMap);
        });
      }), path);
    }), path);
  };
  knownMap = {
  };
  known.forEach(function(key) {
    knownMap[key] = true;
  });
  missingMap = {
  };
  return each(__cb(_, function() {
    return _explore(__cb(_, function() {
      return _(null, Object.keys(missingMap));
    }), path, missingMap);
  }), known, function __1(_, cur) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    return _explore(_, cur, null);
  });
};
exports.directDependencies = function __1(_, path) {
  if (!_) {
    return __future(__1, arguments, 0);
  }
;
  return funnel(_, function __1(_) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    return _directDependencies(_, path);
  });
};
exports.missingDependencies = function __2(_, path, known) {
  if (!_) {
    return __future(__2, arguments, 0);
  }
;
  return funnel(_, function __1(_) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    return _missingDependencies(_, path, known);
  });
};